📘 Project Name: MOMO Executive Task & Project Dashboard
Project Name: ExecTrack
A mobile-first productivity web app that helps executives plan and track projects on a weekly basis, with a clean dashboard, visual progress indicators, and a focused weekly to-do view.

📱 Pages / Core Sections
1. Dashboard (Homepage)
Purpose: Show an overview of the current week’s tasks across all projects.

Components:
✅ “My Tasks This Week” list (pulled from all projects)

🔄 Task list view with checkboxes and status indicators

📈 Small project summary cards or timeline

Project Name

Progress bar or pie chart

Legend (✓ Completed / 🟡 Ongoing / 🔴 Delayed)

2. Planner Page
Purpose: Create and manage projects, broken down into weeks with assigned tasks.

A. Create Project Form
Project Title

Description

Start Date

End Date

🧠 JavaScript Logic:

On project creation, calculate number of weeks between Start and End

Auto-generate weekly containers:

e.g. “Week 1 (June 20–June 26)”

“Week 2 (June 27–July 3)”, etc.

B. Project View
Each project expands as a dropdown:

less
Copy
Edit
📁 Project A [▼]
  Description: Lorem ipsum...
  
  📦 Week 1
    [Add Task] → opens modal
    • Task 1: Design Wireframes (🟡 In Progress)
    • Task 2: Finalize Brief (✅ Complete)
  
  📦 Week 2
    [Add Task] ...
Task Fields (via modal):
Task Title

Owner (optional)

Status: ✅ Complete / 🟡 In Progress / 🔴 Delayed

Due Date (used to flag “Delayed”)

3. To Do Page
Purpose: Show a clean, noise-free list of all tasks for the current week only.

Pulled from all projects

Simple checklist format

Sort by:

Project

Status

Due Date

🔄 Core JS Logics
✅ 1. Auto-Week Generator
Input: Start Date, End Date
Output: Array of weeks, e.g.:

js
Copy
Edit
[
  { weekLabel: "Week 1", start: "June 20", end: "June 26" },
  { weekLabel: "Week 2", start: "June 27", end: "July 3" },
  ...
]
✅ 2. Weekly Task Aggregator (for Dashboard + To-Do)
Check current date and match it to week intervals to pull all tasks for that week.

✅ 3. Progress Indicator Logic
Use a progress bar or pie chart to compute:

% of Complete, Ongoing, and Delayed tasks per project

You can calculate like:

js
Copy
Edit
progress = {
  completed: 5,
  ongoing: 3,
  delayed: 2,
  total: 10
}
📁 Suggested Folder Structure
bash
Copy
Edit
exectrack/
├── index.html            # Dashboard (Tasks this week)
├── planner.html          # Project creation + management
├── todo.html             # Weekly task view
├── /css/
│   └── tailwind.css
├── /js/
│   ├── main.js
│   ├── planner.js        # Create project, add weeks/tasks
│   ├── dashboard.js      # Pull this week's tasks, render stats
│   └── storage.js        # localStorage or API interactions
├── /components/
│   └── taskCard.html
│   └── projectCard.html
├── /assets/
│   └── icons/
└── /data/
    └── sample-data.json
💡 Implementation Plan (Your 2-Day Sprint)
Day 1
 Build homepage (dashboard)

 Implement week-task aggregator logic

 Display “My Tasks This Week” + progress cards

Day 2
 Build planner page with project form

 Add auto-week generation on project creation

 Create project dropdown view with week containers

 Task form modal

 Add To Do page view (filtered to current week)

🔌 Backend (For Now)
Start with localStorage:

localStorage.setItem("projects", JSON.stringify([...]))
